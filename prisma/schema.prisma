// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Usuario {
  id              Int         @id @default(autoincrement())
  nome            String
  nomeUsuario     String      @unique
  email           String      @unique
  senha           String
  nascimento      Int
  idade           Int
  entrouEm        DateTime    @default(now())
  foto            String? // URL ou caminho da foto do usuário
  livrosFavoritos Favorito[]
  tipo            String @default("NORMAL") // <-- Agora tem valor padrão!
  livroDestaqueId Int? // Novo campo: id do livro de destaque
  livroDestaque   Livro?      @relation("LivroDestaque", fields: [livroDestaqueId], references: [id])
  
  // Relacionamentos para seguir escritores
  escritoresSeguindo Seguidor[] @relation("UsuarioSeguindo") // Escritores que este usuário segue
}

model Escritor {
  id              Int       @id @default(autoincrement())
  nome            String
  email           String? // Email profissional (opcional)
  biografia       String? // Breve biografia do escritor
  dataNascimento  DateTime? // Data de nascimento (opcional)
  dataFalecimento DateTime? // Data de falecimento (opcional)
  foto            String? // URL da foto do escritor
  livros          Livro[] // Relacionamento com os livros escritos por este autor
  
  // Relacionamentos para seguidores
  seguidores      Seguidor[] @relation("EscritorSeguido") // Usuários que seguem este escritor
}

model Livro {
  id               Int         @id @default(autoincrement())
  titulo           String
  anoLancamento    Int
  autorId          Int? // ID do escritor (opcional, pois nem todos os livros têm um autor associado)
  autor            Escritor?   @relation(fields: [autorId], references: [id])
  descricao        String
  mediaPreco       Float
  imagem           String
  genero           String
  dificuldade      String
  temAdaptacao     Boolean
  numeroPaginas    Int
  favoritos        Favorito[]
  usuariosDestaque Usuario[]   @relation("LivroDestaque") // Campo oposto para relação de destaque
}

model Favorito {
  id        Int           @id @default(autoincrement())
  usuarioId Int
  livroId   Int
  status    String
  usuario   Usuario       @relation(fields: [usuarioId], references: [id])
  livro     Livro         @relation(fields: [livroId], references: [id])
}

model Seguidor {
  id         Int      @id @default(autoincrement())
  usuarioId  Int      // ID do usuário que está seguindo
  escritorId Int      // ID do escritor sendo seguido
  seguidoEm  DateTime @default(now()) // Data em que começou a seguir
  
  // Relacionamentos
  usuario   Usuario  @relation("UsuarioSeguindo", fields: [usuarioId], references: [id], onDelete: Cascade)
  escritor  Escritor @relation("EscritorSeguido", fields: [escritorId], references: [id], onDelete: Cascade)
  
  // Índice único para evitar seguir o mesmo escritor mais de uma vez
  @@unique([usuarioId, escritorId])
}


